<PROG> -> program {~VTC.CreateTable <body> }~VTC.DestroyLastTable / program

<body> -> <declarations> <_body> / end_block_declarations,bool,char,float,int,
<_body> -> [EPS] / }
<_body> -> <operators> / #IDENTIFIER#,Echo,Echoln,if,while,Read

<declarations> -> start_block_declarations <declarations_0> end_block_declarations / end_block_declarations,bool,char,float,int,double
<declarations_0> -> [EPS] / end_block_declarations
<declarations_0> -> <declaration> ;~AO.Clear <declarations_0> / bool,char,float,int,double
<declaration> -> <type> #IDENTIFIER#~VTC.DefineIdentifier / bool,char,float,int,double

<type> -> bool~VTC.DefineNewType / bool
<type> -> char~VTC.DefineNewType / char
<type> -> float~VTC.DefineNewType / float
<type> -> int~VTC.DefineNewType / int

<operators> -> <operator> <_operators> / #IDENTIFIER#,Echo,Echoln,if,while,Read

<_operators> -> [EPS] / }
<_operators> -> <operators> / #IDENTIFIER#,Echo,Echoln,if,while,Read

<operator> -> <leftValue> = <rightValue>~Common.CheckRightValueDestination ;~TC.CheckLeftRight / #IDENTIFIER#
<operator> -> <print> ;~AO.Clear / Echo,Echoln
<operator> -> <ifExpression> / if
<operator> -> <whileExpression> / while
<operator> -> <read> ;~AO.Clear / Read

<print> -> Echo~Echo.Save ( <printValue> )~Echo.GenerateNode / Echo
<print> -> Echoln~Echo.Save ( <printValue> )~Echo.GenerateNode / Echoln

<printValue> -> #DecimalWholeNumber#~Echo.Save / #DecimalWholeNumber#
<printValue> -> #IDENTIFIER#~Echo.Save / #IDENTIFIER#
<printValue> -> [EPS] / )

<read> -> Read~Read.Save ( <readValue> )~Read.GenerateNode / Read
<readValue> -> #IDENTIFIER#~Read.Save / #IDENTIFIER#

<ariphmeticalOperation> -> <ariphmeticalOperation_0> <ariphmeticalOperation_1> / -,(,#BinaryWholeNumber#,#DecimalWholeNumber#,#IDENTIFIER#,#DecimalFixedPointNumber#
<ariphmeticalOperation_0> -> <number> <mulArOp>~AO.ActionCreateUnaryMinusNode / -,(,#BinaryWholeNumber#,#DecimalWholeNumber#,#IDENTIFIER#,#DecimalFixedPointNumber#

<mulArOp> -> *~AO.ActionAfterSign <number> <mulArOp>~AO.ActionAfterOperation / *
<mulArOp> -> div~AO.ActionAfterSign <number> <mulArOp>~AO.ActionAfterOperation / div
<mulArOp> -> [EPS] / -,),;,+

<ariphmeticalOperation_1> -> -~AO.ActionAfterSign <ariphmeticalOperation_0> <ariphmeticalOperation_1>~AO.ActionAfterOperation / -
<ariphmeticalOperation_1> -> +~AO.ActionAfterSign <ariphmeticalOperation_0> <ariphmeticalOperation_1>~AO.ActionAfterOperation / +
<ariphmeticalOperation_1> -> [EPS] / ),;

<number> -> -~AO.UnaryMinusFoundAction <number> / -
<number> -> (~AO.OpenBracketFound <ariphmeticalOperation> )~AO.ClosedBracketFound / (
<number> -> <number2> / #BinaryWholeNumber#,#DecimalWholeNumber#,#IDENTIFIER#,#DecimalFixedPointNumber#
<number2> -> #BinaryWholeNumber#~AO.ActionAfterNumber / #BinaryWholeNumber#
<number2> -> #DecimalWholeNumber#~AO.ActionAfterNumber / #DecimalWholeNumber#
<number2> -> #DecimalFixedPointNumber#~AO.ActionAfterNumber / #DecimalFixedPointNumber#
<number2> -> #IDENTIFIER#~AO.ActionAfterNumber / #IDENTIFIER#

<leftValue> -> #IDENTIFIER#~TC.SaveLeftTerm / #IDENTIFIER#

<ariphmeticalOperation_rv> -> <ariphmeticalOperation> / -,(,#BinaryWholeNumber#,#DecimalWholeNumber#,#IDENTIFIER#,#DecimalFixedPointNumber#
<rightValue> -> <ariphmeticalOperation_rv> / -,(,#BinaryWholeNumber#,#DecimalWholeNumber#,#IDENTIFIER#,#DecimalFixedPointNumber#
<rightValue> -> <boolExpression_0> / !,(,#IDENTIFIER#,false,true,#DecimalWholeNumber#

<boolExpression_0> -> <boolExpression> / !,(,#IDENTIFIER#,false,true,#DecimalWholeNumber#
<boolExpression> -> <boolOperations> <_boolExpression>~BO.ActionAfterCompOperation / !,(,#IDENTIFIER#,false,true,#DecimalWholeNumber#
<_boolExpression> -> &&~BO.ActionAfterLogicSign <boolExpression> / &&
<_boolExpression> -> [EPS]~BO.ActionAfterCompOperation / ;,)
<_boolExpression> -> ||~BO.ActionAfterLogicSign <boolExpression> / ||
<boolOperations> -> <boolValue> <_boolOperations> / !,(,#IDENTIFIER#,false,true,#DecimalWholeNumber#
<_boolOperations> -> !=~BO.ActionAfterCompSign <boolValue> / !=
<_boolOperations> -> [EPS] / &&,;,),||
<_boolOperations> -> <~BO.ActionAfterCompSign <boolValue> / <
<_boolOperations> -> <=~BO.ActionAfterCompSign <boolValue> / <=
<_boolOperations> -> ==~BO.ActionAfterCompSign <boolValue> / ==
<_boolOperations> -> >~BO.ActionAfterCompSign <boolValue> / >
<_boolOperations> -> >=~BO.ActionAfterCompSign <boolValue> / >=
<boolValue> -> !~BO.UnaryNotSignFound <boolValue> / !
<boolValue> -> (~BO.OpenBracketFound <boolExpression> )~BO.ClosedBracketFound / (
<boolValue> -> <boolValue2> / #IDENTIFIER#,false,true,#DecimalWholeNumber#
<boolValue2> -> #IDENTIFIER#~BO.ActionAfterBoolValue / #IDENTIFIER#
<boolValue2> -> false~BO.ActionAfterBoolValue / false
<boolValue2> -> true~BO.ActionAfterBoolValue / true
<boolValue2> -> #DecimalWholeNumber#~BO.ActionAfterBoolValue / #DecimalWholeNumber#

<ifExpression> -> if ( <boolExpression_0> )~IF.AddIf { <operators> }~IF.AddThenEnd <ifExpression_else> / if
<ifExpression_else> -> [EPS] / #IDENTIFIER#,Echo,Echoln,if,}
<ifExpression_else> -> else {~IF.AddElseBegin <operators> }~IF.AddElseEnd / else

<whileExpression> -> while ( <boolExpression_0> )~While.AddWhile { <operators> }~While.AddWhileEnd / while